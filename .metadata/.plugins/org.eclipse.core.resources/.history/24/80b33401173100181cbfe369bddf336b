package classes;

public class SymmetricStringAnalyzer {
	private String s; 
	public SymmetricStringAnalyzer(String s) {
		this.s = s; 
	}
	
	/**
	 * Determines if the string s is symmetric
	 * @return true if it is; false, otherwise. 
	 */
	public boolean isValidContent() { 
		if(s.length() == 0) { return true; }
		SLLStack<Character> stack1 = new SLLStack<>();
		
		for(int i = 0; i< s.length();i++){
		
			char c = (s.charAt(i));
			
			if(Character.isLetter(c)){
			
				if(Character.isUpperCase(c)){
				
					stack1.push(c);
				}
				
				else if(stack1.isEmpty()) {
				
					return false;
					
				}
				
				else{
					char t = stack1.top();
					if(t == Character.toUpperCase(c))stack1.pop();
					else return false;
				}
			}
			else{
				return false;
			}
		}
		return true;
	}
	
	public String toString() { 
		return s; 
	}

	public String parenthesizedExpression() 
	throws StringIsNotSymmetricException 
	{
		// ADD MISSING CODE
		
		return null;  // need to change if necessary....
	}

}
